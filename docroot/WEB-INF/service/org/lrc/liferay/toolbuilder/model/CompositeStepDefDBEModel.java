/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.lrc.liferay.toolbuilder.model;

import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the CompositeStepDefDBE service. Represents a row in the &quot;lrc_tb_CompositeStepDefDBE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.lrc.liferay.toolbuilder.model.impl.CompositeStepDefDBEModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.lrc.liferay.toolbuilder.model.impl.CompositeStepDefDBEImpl}.
 * </p>
 *
 * @author Fernando Su√°rez
 * @see CompositeStepDefDBE
 * @see org.lrc.liferay.toolbuilder.model.impl.CompositeStepDefDBEImpl
 * @see org.lrc.liferay.toolbuilder.model.impl.CompositeStepDefDBEModelImpl
 * @generated
 */
public interface CompositeStepDefDBEModel extends BaseModel<CompositeStepDefDBE> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a composite step def d b e model instance should use the {@link CompositeStepDefDBE} interface instead.
	 */

	/**
	 * Returns the primary key of this composite step def d b e.
	 *
	 * @return the primary key of this composite step def d b e
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this composite step def d b e.
	 *
	 * @param primaryKey the primary key of this composite step def d b e
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the composite step def d b e ID of this composite step def d b e.
	 *
	 * @return the composite step def d b e ID of this composite step def d b e
	 */
	public long getCompositeStepDefDBEId();

	/**
	 * Sets the composite step def d b e ID of this composite step def d b e.
	 *
	 * @param compositeStepDefDBEId the composite step def d b e ID of this composite step def d b e
	 */
	public void setCompositeStepDefDBEId(long compositeStepDefDBEId);

	/**
	 * Returns the steps number of this composite step def d b e.
	 *
	 * @return the steps number of this composite step def d b e
	 */
	public int getStepsNumber();

	/**
	 * Sets the steps number of this composite step def d b e.
	 *
	 * @param stepsNumber the steps number of this composite step def d b e
	 */
	public void setStepsNumber(int stepsNumber);

	/**
	 * Returns the sequential of this composite step def d b e.
	 *
	 * @return the sequential of this composite step def d b e
	 */
	public boolean getSequential();

	/**
	 * Returns <code>true</code> if this composite step def d b e is sequential.
	 *
	 * @return <code>true</code> if this composite step def d b e is sequential; <code>false</code> otherwise
	 */
	public boolean isSequential();

	/**
	 * Sets whether this composite step def d b e is sequential.
	 *
	 * @param sequential the sequential of this composite step def d b e
	 */
	public void setSequential(boolean sequential);

	/**
	 * Returns the depth of this composite step def d b e.
	 *
	 * @return the depth of this composite step def d b e
	 */
	public int getDepth();

	/**
	 * Sets the depth of this composite step def d b e.
	 *
	 * @param depth the depth of this composite step def d b e
	 */
	public void setDepth(int depth);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		org.lrc.liferay.toolbuilder.model.CompositeStepDefDBE compositeStepDefDBE);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.lrc.liferay.toolbuilder.model.CompositeStepDefDBE> toCacheModel();

	@Override
	public org.lrc.liferay.toolbuilder.model.CompositeStepDefDBE toEscapedModel();

	@Override
	public org.lrc.liferay.toolbuilder.model.CompositeStepDefDBE toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}
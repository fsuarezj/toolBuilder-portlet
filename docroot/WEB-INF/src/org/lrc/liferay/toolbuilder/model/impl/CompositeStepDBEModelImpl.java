/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.lrc.liferay.toolbuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.lrc.liferay.toolbuilder.model.CompositeStepDBE;
import org.lrc.liferay.toolbuilder.model.CompositeStepDBEModel;
import org.lrc.liferay.toolbuilder.model.CompositeStepDBESoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CompositeStepDBE service. Represents a row in the &quot;lrc_tb_CompositeStepDBE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.lrc.liferay.toolbuilder.model.CompositeStepDBEModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CompositeStepDBEImpl}.
 * </p>
 *
 * @author Fernando Su√°rez
 * @see CompositeStepDBEImpl
 * @see org.lrc.liferay.toolbuilder.model.CompositeStepDBE
 * @see org.lrc.liferay.toolbuilder.model.CompositeStepDBEModel
 * @generated
 */
@JSON(strict = true)
public class CompositeStepDBEModelImpl extends BaseModelImpl<CompositeStepDBE>
	implements CompositeStepDBEModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a composite step d b e model instance should use the {@link org.lrc.liferay.toolbuilder.model.CompositeStepDBE} interface instead.
	 */
	public static final String TABLE_NAME = "lrc_tb_CompositeStepDBE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "compositeStepDBEId", Types.BIGINT },
			{ "currentStep", Types.INTEGER },
			{ "compositeStepDefDBEId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table lrc_tb_CompositeStepDBE (compositeStepDBEId LONG not null primary key,currentStep INTEGER,compositeStepDefDBEId LONG)";
	public static final String TABLE_SQL_DROP = "drop table lrc_tb_CompositeStepDBE";
	public static final String ORDER_BY_JPQL = " ORDER BY compositeStepDBE.compositeStepDBEId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY lrc_tb_CompositeStepDBE.compositeStepDBEId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.lrc.liferay.toolbuilder.model.CompositeStepDBE"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.lrc.liferay.toolbuilder.model.CompositeStepDBE"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.lrc.liferay.toolbuilder.model.CompositeStepDBE"),
			true);
	public static long COMPOSITESTEPDBEID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CompositeStepDBE toModel(CompositeStepDBESoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CompositeStepDBE model = new CompositeStepDBEImpl();

		model.setCompositeStepDBEId(soapModel.getCompositeStepDBEId());
		model.setCurrentStep(soapModel.getCurrentStep());
		model.setCompositeStepDefDBEId(soapModel.getCompositeStepDefDBEId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CompositeStepDBE> toModels(
		CompositeStepDBESoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CompositeStepDBE> models = new ArrayList<CompositeStepDBE>(soapModels.length);

		for (CompositeStepDBESoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_LRC_TB_CS_STEP_NAME = "lrc_tb_CS_Step";
	public static final Object[][] MAPPING_TABLE_LRC_TB_CS_STEP_COLUMNS = {
			{ "compositeStepDBEId", Types.BIGINT },
			{ "stepDBEId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_LRC_TB_CS_STEP_SQL_CREATE = "create table lrc_tb_CS_Step (compositeStepDBEId LONG not null,stepDBEId LONG not null,primary key (compositeStepDBEId, stepDBEId))";
	public static final boolean FINDER_CACHE_ENABLED_LRC_TB_CS_STEP = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.lrc_tb_CS_Step"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.lrc.liferay.toolbuilder.model.CompositeStepDBE"));

	public CompositeStepDBEModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _compositeStepDBEId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompositeStepDBEId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _compositeStepDBEId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CompositeStepDBE.class;
	}

	@Override
	public String getModelClassName() {
		return CompositeStepDBE.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("compositeStepDBEId", getCompositeStepDBEId());
		attributes.put("currentStep", getCurrentStep());
		attributes.put("compositeStepDefDBEId", getCompositeStepDefDBEId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long compositeStepDBEId = (Long)attributes.get("compositeStepDBEId");

		if (compositeStepDBEId != null) {
			setCompositeStepDBEId(compositeStepDBEId);
		}

		Integer currentStep = (Integer)attributes.get("currentStep");

		if (currentStep != null) {
			setCurrentStep(currentStep);
		}

		Long compositeStepDefDBEId = (Long)attributes.get(
				"compositeStepDefDBEId");

		if (compositeStepDefDBEId != null) {
			setCompositeStepDefDBEId(compositeStepDefDBEId);
		}
	}

	@JSON
	@Override
	public long getCompositeStepDBEId() {
		return _compositeStepDBEId;
	}

	@Override
	public void setCompositeStepDBEId(long compositeStepDBEId) {
		_columnBitmask |= COMPOSITESTEPDBEID_COLUMN_BITMASK;

		if (!_setOriginalCompositeStepDBEId) {
			_setOriginalCompositeStepDBEId = true;

			_originalCompositeStepDBEId = _compositeStepDBEId;
		}

		_compositeStepDBEId = compositeStepDBEId;
	}

	public long getOriginalCompositeStepDBEId() {
		return _originalCompositeStepDBEId;
	}

	@JSON
	@Override
	public int getCurrentStep() {
		return _currentStep;
	}

	@Override
	public void setCurrentStep(int currentStep) {
		_currentStep = currentStep;
	}

	@JSON
	@Override
	public long getCompositeStepDefDBEId() {
		return _compositeStepDefDBEId;
	}

	@Override
	public void setCompositeStepDefDBEId(long compositeStepDefDBEId) {
		_compositeStepDefDBEId = compositeStepDefDBEId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CompositeStepDBE.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CompositeStepDBE toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CompositeStepDBE)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CompositeStepDBEImpl compositeStepDBEImpl = new CompositeStepDBEImpl();

		compositeStepDBEImpl.setCompositeStepDBEId(getCompositeStepDBEId());
		compositeStepDBEImpl.setCurrentStep(getCurrentStep());
		compositeStepDBEImpl.setCompositeStepDefDBEId(getCompositeStepDefDBEId());

		compositeStepDBEImpl.resetOriginalValues();

		return compositeStepDBEImpl;
	}

	@Override
	public int compareTo(CompositeStepDBE compositeStepDBE) {
		long primaryKey = compositeStepDBE.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CompositeStepDBE)) {
			return false;
		}

		CompositeStepDBE compositeStepDBE = (CompositeStepDBE)obj;

		long primaryKey = compositeStepDBE.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CompositeStepDBEModelImpl compositeStepDBEModelImpl = this;

		compositeStepDBEModelImpl._originalCompositeStepDBEId = compositeStepDBEModelImpl._compositeStepDBEId;

		compositeStepDBEModelImpl._setOriginalCompositeStepDBEId = false;

		compositeStepDBEModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CompositeStepDBE> toCacheModel() {
		CompositeStepDBECacheModel compositeStepDBECacheModel = new CompositeStepDBECacheModel();

		compositeStepDBECacheModel.compositeStepDBEId = getCompositeStepDBEId();

		compositeStepDBECacheModel.currentStep = getCurrentStep();

		compositeStepDBECacheModel.compositeStepDefDBEId = getCompositeStepDefDBEId();

		return compositeStepDBECacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{compositeStepDBEId=");
		sb.append(getCompositeStepDBEId());
		sb.append(", currentStep=");
		sb.append(getCurrentStep());
		sb.append(", compositeStepDefDBEId=");
		sb.append(getCompositeStepDefDBEId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.lrc.liferay.toolbuilder.model.CompositeStepDBE");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>compositeStepDBEId</column-name><column-value><![CDATA[");
		sb.append(getCompositeStepDBEId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentStep</column-name><column-value><![CDATA[");
		sb.append(getCurrentStep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compositeStepDefDBEId</column-name><column-value><![CDATA[");
		sb.append(getCompositeStepDefDBEId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CompositeStepDBE.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CompositeStepDBE.class
		};
	private long _compositeStepDBEId;
	private long _originalCompositeStepDBEId;
	private boolean _setOriginalCompositeStepDBEId;
	private int _currentStep;
	private long _compositeStepDefDBEId;
	private long _columnBitmask;
	private CompositeStepDBE _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.lrc.liferay.toolbuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.lrc.liferay.toolbuilder.model.ToolDefDBE;
import org.lrc.liferay.toolbuilder.model.ToolDefDBEModel;
import org.lrc.liferay.toolbuilder.model.ToolDefDBESoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ToolDefDBE service. Represents a row in the &quot;lrc_tb_ToolDefDBE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.lrc.liferay.toolbuilder.model.ToolDefDBEModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ToolDefDBEImpl}.
 * </p>
 *
 * @author Fernando Su√°rez
 * @see ToolDefDBEImpl
 * @see org.lrc.liferay.toolbuilder.model.ToolDefDBE
 * @see org.lrc.liferay.toolbuilder.model.ToolDefDBEModel
 * @generated
 */
@JSON(strict = true)
public class ToolDefDBEModelImpl extends BaseModelImpl<ToolDefDBE>
	implements ToolDefDBEModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tool def d b e model instance should use the {@link org.lrc.liferay.toolbuilder.model.ToolDefDBE} interface instead.
	 */
	public static final String TABLE_NAME = "lrc_tb_ToolDefDBE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "toolDefDBEId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "toolName", Types.VARCHAR },
			{ "compositeStepDefDBEId", Types.BIGINT },
			{ "toolDescription", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table lrc_tb_ToolDefDBE (toolDefDBEId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,toolName VARCHAR(75) null,compositeStepDefDBEId LONG,toolDescription VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table lrc_tb_ToolDefDBE";
	public static final String ORDER_BY_JPQL = " ORDER BY toolDefDBE.toolDefDBEId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY lrc_tb_ToolDefDBE.toolDefDBEId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.lrc.liferay.toolbuilder.model.ToolDefDBE"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.lrc.liferay.toolbuilder.model.ToolDefDBE"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.lrc.liferay.toolbuilder.model.ToolDefDBE"),
			true);
	public static long TOOLDEFDBEID_COLUMN_BITMASK = 1L;
	public static long TOOLNAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ToolDefDBE toModel(ToolDefDBESoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ToolDefDBE model = new ToolDefDBEImpl();

		model.setToolDefDBEId(soapModel.getToolDefDBEId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setToolName(soapModel.getToolName());
		model.setCompositeStepDefDBEId(soapModel.getCompositeStepDefDBEId());
		model.setToolDescription(soapModel.getToolDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ToolDefDBE> toModels(ToolDefDBESoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ToolDefDBE> models = new ArrayList<ToolDefDBE>(soapModels.length);

		for (ToolDefDBESoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.lrc.liferay.toolbuilder.model.ToolDefDBE"));

	public ToolDefDBEModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _toolDefDBEId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setToolDefDBEId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _toolDefDBEId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ToolDefDBE.class;
	}

	@Override
	public String getModelClassName() {
		return ToolDefDBE.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("toolDefDBEId", getToolDefDBEId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("toolName", getToolName());
		attributes.put("compositeStepDefDBEId", getCompositeStepDefDBEId());
		attributes.put("toolDescription", getToolDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long toolDefDBEId = (Long)attributes.get("toolDefDBEId");

		if (toolDefDBEId != null) {
			setToolDefDBEId(toolDefDBEId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String toolName = (String)attributes.get("toolName");

		if (toolName != null) {
			setToolName(toolName);
		}

		Long compositeStepDefDBEId = (Long)attributes.get(
				"compositeStepDefDBEId");

		if (compositeStepDefDBEId != null) {
			setCompositeStepDefDBEId(compositeStepDefDBEId);
		}

		String toolDescription = (String)attributes.get("toolDescription");

		if (toolDescription != null) {
			setToolDescription(toolDescription);
		}
	}

	@JSON
	@Override
	public long getToolDefDBEId() {
		return _toolDefDBEId;
	}

	@Override
	public void setToolDefDBEId(long toolDefDBEId) {
		_columnBitmask |= TOOLDEFDBEID_COLUMN_BITMASK;

		if (!_setOriginalToolDefDBEId) {
			_setOriginalToolDefDBEId = true;

			_originalToolDefDBEId = _toolDefDBEId;
		}

		_toolDefDBEId = toolDefDBEId;
	}

	public long getOriginalToolDefDBEId() {
		return _originalToolDefDBEId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getToolName() {
		if (_toolName == null) {
			return StringPool.BLANK;
		}
		else {
			return _toolName;
		}
	}

	@Override
	public void setToolName(String toolName) {
		_columnBitmask |= TOOLNAME_COLUMN_BITMASK;

		if (_originalToolName == null) {
			_originalToolName = _toolName;
		}

		_toolName = toolName;
	}

	public String getOriginalToolName() {
		return GetterUtil.getString(_originalToolName);
	}

	@JSON
	@Override
	public long getCompositeStepDefDBEId() {
		return _compositeStepDefDBEId;
	}

	@Override
	public void setCompositeStepDefDBEId(long compositeStepDefDBEId) {
		_compositeStepDefDBEId = compositeStepDefDBEId;
	}

	@JSON
	@Override
	public String getToolDescription() {
		if (_toolDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _toolDescription;
		}
	}

	@Override
	public void setToolDescription(String toolDescription) {
		_toolDescription = toolDescription;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ToolDefDBE.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ToolDefDBE toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ToolDefDBE)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ToolDefDBEImpl toolDefDBEImpl = new ToolDefDBEImpl();

		toolDefDBEImpl.setToolDefDBEId(getToolDefDBEId());
		toolDefDBEImpl.setGroupId(getGroupId());
		toolDefDBEImpl.setCompanyId(getCompanyId());
		toolDefDBEImpl.setUserId(getUserId());
		toolDefDBEImpl.setUserName(getUserName());
		toolDefDBEImpl.setCreateDate(getCreateDate());
		toolDefDBEImpl.setModifiedDate(getModifiedDate());
		toolDefDBEImpl.setToolName(getToolName());
		toolDefDBEImpl.setCompositeStepDefDBEId(getCompositeStepDefDBEId());
		toolDefDBEImpl.setToolDescription(getToolDescription());

		toolDefDBEImpl.resetOriginalValues();

		return toolDefDBEImpl;
	}

	@Override
	public int compareTo(ToolDefDBE toolDefDBE) {
		long primaryKey = toolDefDBE.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ToolDefDBE)) {
			return false;
		}

		ToolDefDBE toolDefDBE = (ToolDefDBE)obj;

		long primaryKey = toolDefDBE.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ToolDefDBEModelImpl toolDefDBEModelImpl = this;

		toolDefDBEModelImpl._originalToolDefDBEId = toolDefDBEModelImpl._toolDefDBEId;

		toolDefDBEModelImpl._setOriginalToolDefDBEId = false;

		toolDefDBEModelImpl._originalToolName = toolDefDBEModelImpl._toolName;

		toolDefDBEModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ToolDefDBE> toCacheModel() {
		ToolDefDBECacheModel toolDefDBECacheModel = new ToolDefDBECacheModel();

		toolDefDBECacheModel.toolDefDBEId = getToolDefDBEId();

		toolDefDBECacheModel.groupId = getGroupId();

		toolDefDBECacheModel.companyId = getCompanyId();

		toolDefDBECacheModel.userId = getUserId();

		toolDefDBECacheModel.userName = getUserName();

		String userName = toolDefDBECacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			toolDefDBECacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			toolDefDBECacheModel.createDate = createDate.getTime();
		}
		else {
			toolDefDBECacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			toolDefDBECacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			toolDefDBECacheModel.modifiedDate = Long.MIN_VALUE;
		}

		toolDefDBECacheModel.toolName = getToolName();

		String toolName = toolDefDBECacheModel.toolName;

		if ((toolName != null) && (toolName.length() == 0)) {
			toolDefDBECacheModel.toolName = null;
		}

		toolDefDBECacheModel.compositeStepDefDBEId = getCompositeStepDefDBEId();

		toolDefDBECacheModel.toolDescription = getToolDescription();

		String toolDescription = toolDefDBECacheModel.toolDescription;

		if ((toolDescription != null) && (toolDescription.length() == 0)) {
			toolDefDBECacheModel.toolDescription = null;
		}

		return toolDefDBECacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{toolDefDBEId=");
		sb.append(getToolDefDBEId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", toolName=");
		sb.append(getToolName());
		sb.append(", compositeStepDefDBEId=");
		sb.append(getCompositeStepDefDBEId());
		sb.append(", toolDescription=");
		sb.append(getToolDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("org.lrc.liferay.toolbuilder.model.ToolDefDBE");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>toolDefDBEId</column-name><column-value><![CDATA[");
		sb.append(getToolDefDBEId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toolName</column-name><column-value><![CDATA[");
		sb.append(getToolName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compositeStepDefDBEId</column-name><column-value><![CDATA[");
		sb.append(getCompositeStepDefDBEId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toolDescription</column-name><column-value><![CDATA[");
		sb.append(getToolDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ToolDefDBE.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ToolDefDBE.class
		};
	private long _toolDefDBEId;
	private long _originalToolDefDBEId;
	private boolean _setOriginalToolDefDBEId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _toolName;
	private String _originalToolName;
	private long _compositeStepDefDBEId;
	private String _toolDescription;
	private long _columnBitmask;
	private ToolDefDBE _escapedModel;
}
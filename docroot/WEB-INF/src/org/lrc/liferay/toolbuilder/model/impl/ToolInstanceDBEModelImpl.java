/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.lrc.liferay.toolbuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.lrc.liferay.toolbuilder.model.ToolInstanceDBE;
import org.lrc.liferay.toolbuilder.model.ToolInstanceDBEModel;
import org.lrc.liferay.toolbuilder.model.ToolInstanceDBESoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ToolInstanceDBE service. Represents a row in the &quot;lrc_tb_ToolInstanceDBE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.lrc.liferay.toolbuilder.model.ToolInstanceDBEModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ToolInstanceDBEImpl}.
 * </p>
 *
 * @author Fernando Su√°rez
 * @see ToolInstanceDBEImpl
 * @see org.lrc.liferay.toolbuilder.model.ToolInstanceDBE
 * @see org.lrc.liferay.toolbuilder.model.ToolInstanceDBEModel
 * @generated
 */
@JSON(strict = true)
public class ToolInstanceDBEModelImpl extends BaseModelImpl<ToolInstanceDBE>
	implements ToolInstanceDBEModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tool instance d b e model instance should use the {@link org.lrc.liferay.toolbuilder.model.ToolInstanceDBE} interface instead.
	 */
	public static final String TABLE_NAME = "lrc_tb_ToolInstanceDBE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "toolInstanceDBEId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "toolDefDBEId", Types.BIGINT },
			{ "compositeStepDBEId", Types.BIGINT },
			{ "toolTitle", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table lrc_tb_ToolInstanceDBE (toolInstanceDBEId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,toolDefDBEId LONG,compositeStepDBEId LONG,toolTitle VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table lrc_tb_ToolInstanceDBE";
	public static final String ORDER_BY_JPQL = " ORDER BY toolInstanceDBE.toolInstanceDBEId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY lrc_tb_ToolInstanceDBE.toolInstanceDBEId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.lrc.liferay.toolbuilder.model.ToolInstanceDBE"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.lrc.liferay.toolbuilder.model.ToolInstanceDBE"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.lrc.liferay.toolbuilder.model.ToolInstanceDBE"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long TOOLDEFDBEID_COLUMN_BITMASK = 2L;
	public static long TOOLINSTANCEDBEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ToolInstanceDBE toModel(ToolInstanceDBESoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ToolInstanceDBE model = new ToolInstanceDBEImpl();

		model.setToolInstanceDBEId(soapModel.getToolInstanceDBEId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setToolDefDBEId(soapModel.getToolDefDBEId());
		model.setCompositeStepDBEId(soapModel.getCompositeStepDBEId());
		model.setToolTitle(soapModel.getToolTitle());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ToolInstanceDBE> toModels(
		ToolInstanceDBESoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ToolInstanceDBE> models = new ArrayList<ToolInstanceDBE>(soapModels.length);

		for (ToolInstanceDBESoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.lrc.liferay.toolbuilder.model.ToolInstanceDBE"));

	public ToolInstanceDBEModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _toolInstanceDBEId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setToolInstanceDBEId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _toolInstanceDBEId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ToolInstanceDBE.class;
	}

	@Override
	public String getModelClassName() {
		return ToolInstanceDBE.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("toolInstanceDBEId", getToolInstanceDBEId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("toolDefDBEId", getToolDefDBEId());
		attributes.put("compositeStepDBEId", getCompositeStepDBEId());
		attributes.put("toolTitle", getToolTitle());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long toolInstanceDBEId = (Long)attributes.get("toolInstanceDBEId");

		if (toolInstanceDBEId != null) {
			setToolInstanceDBEId(toolInstanceDBEId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long toolDefDBEId = (Long)attributes.get("toolDefDBEId");

		if (toolDefDBEId != null) {
			setToolDefDBEId(toolDefDBEId);
		}

		Long compositeStepDBEId = (Long)attributes.get("compositeStepDBEId");

		if (compositeStepDBEId != null) {
			setCompositeStepDBEId(compositeStepDBEId);
		}

		String toolTitle = (String)attributes.get("toolTitle");

		if (toolTitle != null) {
			setToolTitle(toolTitle);
		}
	}

	@JSON
	@Override
	public long getToolInstanceDBEId() {
		return _toolInstanceDBEId;
	}

	@Override
	public void setToolInstanceDBEId(long toolInstanceDBEId) {
		_columnBitmask |= TOOLINSTANCEDBEID_COLUMN_BITMASK;

		if (!_setOriginalToolInstanceDBEId) {
			_setOriginalToolInstanceDBEId = true;

			_originalToolInstanceDBEId = _toolInstanceDBEId;
		}

		_toolInstanceDBEId = toolInstanceDBEId;
	}

	public long getOriginalToolInstanceDBEId() {
		return _originalToolInstanceDBEId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getToolDefDBEId() {
		return _toolDefDBEId;
	}

	@Override
	public void setToolDefDBEId(long toolDefDBEId) {
		_columnBitmask |= TOOLDEFDBEID_COLUMN_BITMASK;

		if (!_setOriginalToolDefDBEId) {
			_setOriginalToolDefDBEId = true;

			_originalToolDefDBEId = _toolDefDBEId;
		}

		_toolDefDBEId = toolDefDBEId;
	}

	public long getOriginalToolDefDBEId() {
		return _originalToolDefDBEId;
	}

	@JSON
	@Override
	public long getCompositeStepDBEId() {
		return _compositeStepDBEId;
	}

	@Override
	public void setCompositeStepDBEId(long compositeStepDBEId) {
		_compositeStepDBEId = compositeStepDBEId;
	}

	@JSON
	@Override
	public String getToolTitle() {
		if (_toolTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _toolTitle;
		}
	}

	@Override
	public void setToolTitle(String toolTitle) {
		_toolTitle = toolTitle;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ToolInstanceDBE.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ToolInstanceDBE toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ToolInstanceDBE)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ToolInstanceDBEImpl toolInstanceDBEImpl = new ToolInstanceDBEImpl();

		toolInstanceDBEImpl.setToolInstanceDBEId(getToolInstanceDBEId());
		toolInstanceDBEImpl.setGroupId(getGroupId());
		toolInstanceDBEImpl.setCompanyId(getCompanyId());
		toolInstanceDBEImpl.setUserId(getUserId());
		toolInstanceDBEImpl.setUserName(getUserName());
		toolInstanceDBEImpl.setCreateDate(getCreateDate());
		toolInstanceDBEImpl.setModifiedDate(getModifiedDate());
		toolInstanceDBEImpl.setToolDefDBEId(getToolDefDBEId());
		toolInstanceDBEImpl.setCompositeStepDBEId(getCompositeStepDBEId());
		toolInstanceDBEImpl.setToolTitle(getToolTitle());

		toolInstanceDBEImpl.resetOriginalValues();

		return toolInstanceDBEImpl;
	}

	@Override
	public int compareTo(ToolInstanceDBE toolInstanceDBE) {
		long primaryKey = toolInstanceDBE.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ToolInstanceDBE)) {
			return false;
		}

		ToolInstanceDBE toolInstanceDBE = (ToolInstanceDBE)obj;

		long primaryKey = toolInstanceDBE.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ToolInstanceDBEModelImpl toolInstanceDBEModelImpl = this;

		toolInstanceDBEModelImpl._originalToolInstanceDBEId = toolInstanceDBEModelImpl._toolInstanceDBEId;

		toolInstanceDBEModelImpl._setOriginalToolInstanceDBEId = false;

		toolInstanceDBEModelImpl._originalGroupId = toolInstanceDBEModelImpl._groupId;

		toolInstanceDBEModelImpl._setOriginalGroupId = false;

		toolInstanceDBEModelImpl._originalToolDefDBEId = toolInstanceDBEModelImpl._toolDefDBEId;

		toolInstanceDBEModelImpl._setOriginalToolDefDBEId = false;

		toolInstanceDBEModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ToolInstanceDBE> toCacheModel() {
		ToolInstanceDBECacheModel toolInstanceDBECacheModel = new ToolInstanceDBECacheModel();

		toolInstanceDBECacheModel.toolInstanceDBEId = getToolInstanceDBEId();

		toolInstanceDBECacheModel.groupId = getGroupId();

		toolInstanceDBECacheModel.companyId = getCompanyId();

		toolInstanceDBECacheModel.userId = getUserId();

		toolInstanceDBECacheModel.userName = getUserName();

		String userName = toolInstanceDBECacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			toolInstanceDBECacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			toolInstanceDBECacheModel.createDate = createDate.getTime();
		}
		else {
			toolInstanceDBECacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			toolInstanceDBECacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			toolInstanceDBECacheModel.modifiedDate = Long.MIN_VALUE;
		}

		toolInstanceDBECacheModel.toolDefDBEId = getToolDefDBEId();

		toolInstanceDBECacheModel.compositeStepDBEId = getCompositeStepDBEId();

		toolInstanceDBECacheModel.toolTitle = getToolTitle();

		String toolTitle = toolInstanceDBECacheModel.toolTitle;

		if ((toolTitle != null) && (toolTitle.length() == 0)) {
			toolInstanceDBECacheModel.toolTitle = null;
		}

		return toolInstanceDBECacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{toolInstanceDBEId=");
		sb.append(getToolInstanceDBEId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", toolDefDBEId=");
		sb.append(getToolDefDBEId());
		sb.append(", compositeStepDBEId=");
		sb.append(getCompositeStepDBEId());
		sb.append(", toolTitle=");
		sb.append(getToolTitle());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("org.lrc.liferay.toolbuilder.model.ToolInstanceDBE");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>toolInstanceDBEId</column-name><column-value><![CDATA[");
		sb.append(getToolInstanceDBEId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toolDefDBEId</column-name><column-value><![CDATA[");
		sb.append(getToolDefDBEId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compositeStepDBEId</column-name><column-value><![CDATA[");
		sb.append(getCompositeStepDBEId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toolTitle</column-name><column-value><![CDATA[");
		sb.append(getToolTitle());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ToolInstanceDBE.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ToolInstanceDBE.class
		};
	private long _toolInstanceDBEId;
	private long _originalToolInstanceDBEId;
	private boolean _setOriginalToolInstanceDBEId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _toolDefDBEId;
	private long _originalToolDefDBEId;
	private boolean _setOriginalToolDefDBEId;
	private long _compositeStepDBEId;
	private String _toolTitle;
	private long _columnBitmask;
	private ToolInstanceDBE _escapedModel;
}
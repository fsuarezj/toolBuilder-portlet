#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{pdflscape}
\usepackage{fmtcount}
\usepackage[super]{nth}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Abstract
Blablabla
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Section
Objectives
\end_layout

\begin_layout Standard
Develop a web tool to help practitioners to carry out Rapid Assessment for
 Markets
\end_layout

\begin_layout Section
Development Methodology
\end_layout

\begin_layout Standard
Intro
\end_layout

\begin_layout Subsection
Implementing agile methodologies (Kanban)
\end_layout

\begin_layout Subsubsection
Taiga
\end_layout

\begin_layout Subsection
Branching
\end_layout

\begin_layout Subsubsection
Git
\end_layout

\begin_layout Subsection
Issues tracking
\end_layout

\begin_layout Subsection
Behavior Driven Development
\end_layout

\begin_layout Subsection
Documentation
\end_layout

\begin_layout Subsubsection
Javadoc
\end_layout

\begin_layout Section
Testing Framework
\end_layout

\begin_layout Standard
Intro
\end_layout

\begin_layout Subsection
Unit Tests / Whitebox
\end_layout

\begin_layout Subsubsection
JUnit
\end_layout

\begin_layout Subsubsection
Mockito
\end_layout

\begin_layout Subsection
Integration and Functional Tests / BlackBox
\end_layout

\begin_layout Subsubsection
Arquillian
\end_layout

\begin_layout Subsubsection
Selenium
\end_layout

\begin_layout Standard
Problems with Firefox updating
\end_layout

\begin_layout Subsubsection
Cucumber-JVM
\end_layout

\begin_layout Subsection
Usability
\end_layout

\begin_layout Section
Analysis and Requirements
\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Standard
Intro
\end_layout

\begin_layout Subsection
Technologies
\end_layout

\begin_layout Subsubsection
Liferay
\end_layout

\begin_layout Subsubsection
JavaServer Faces (JSF) & Components Design
\end_layout

\begin_layout Standard
Components design describing the whole system and invariable parts
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/jsf_scheme.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
JSF components
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:jsf_components"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Primefaces
\end_layout

\begin_layout Subsection
Object Model
\end_layout

\begin_layout Subsubsection
Components Design
\end_layout

\begin_layout Subsubsection
Patterns used 
\end_layout

\begin_layout Standard
Factory Pattern to create tool structures from the App Managed Bean.
\end_layout

\begin_layout Standard
Prototype Pattern to preload tools from the App Managed Bean.
\end_layout

\begin_layout Standard
Composite Pattern for CompositeStep
\end_layout

\begin_layout Subsection
Data Model
\end_layout

\begin_layout Section
Development
\end_layout

\begin_layout Subsection
First Sprint
\end_layout

\begin_layout Standard
A basic tool to navigate through the RAM Steps and capable of save the current
 state of each assessment
\end_layout

\begin_layout Subsubsection
Design
\end_layout

\begin_layout Standard
A first design was drafted to make implementation easier so the JSF architecture
 was kept in mind when coding.
\end_layout

\begin_layout Standard
Beans
\end_layout

\begin_layout Standard
Model
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/ferda/informatica/development/liferay/portlets/toolBuilder-portlet/doc/uml/exported/First Sprint Class Diagram.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Design for the first sprint
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:sprint1_design"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Standard
Model with Service Builder
\end_layout

\begin_layout Standard
Beans which inherit from Abstract Bean.
\end_layout

\begin_layout Subsubsection
Testing
\end_layout

\begin_layout Standard
Testing in this sprint was merely human guided since the testing framework
 had not yet been developed.
\end_layout

\begin_layout Subsection
Second Sprint
\end_layout

\begin_layout Standard
In order to implement in the future the flow chart tools within the RAM,
 a flow chart system should be developed.
 The flowchart library search didn't give results so a generic library util
 was developed.
\end_layout

\begin_layout Subsubsection
Design
\end_layout

\begin_layout Standard
BasicNode, BasicFlowChart composed by BasicNodes and Flow which represents
 the flow through the flow chart.
 Another PermissiveFlow was created to...
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/ferda/informatica/development/liferay/portlets/toolBuilder-portlet/doc/uml/exported/flowcharts Class Diagram.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Design for the second sprint, the flowchart util library
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:sprint2_design"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Subsubsection
Testing
\end_layout

\begin_layout Standard
Unit tests were developed and run helping to find and fix bugs
\end_layout

\begin_layout Subsection
Third Sprint
\end_layout

\begin_layout Standard
After some interviews with the client it is concluded that the development
 is quite limited and poorly flexible since it will just fit the current
 RAM tool requisites and it would be pretty complex to extend it.
 Finally it is decided to change the requisites and develop a web tool flexible
 enough to implement different kind of methodologies or tools.
 That is how the project is becomes a tool builder and so is called Toolbuilder.
 Create CompositeStep
\end_layout

\begin_layout Subsubsection
Design
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/ferda/informatica/development/liferay/portlets/toolBuilder-portlet/doc/uml/exported/Third Sprint Class Diagram.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Design for the third sprint
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sprint3_design"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Subsubsection
Testing
\end_layout

\begin_layout Standard
In this Sprint the testing framework was implemented and a Behavior Driven
 Development was set up for next Sprints.
 Tests scenarios were developed for the three existing features:
\end_layout

\begin_layout Enumerate
Tool Instance Creation
\end_layout

\begin_layout Enumerate
Tool Instance Deletion
\end_layout

\begin_layout Enumerate
Navigate through steps
\end_layout

\begin_layout Standard
For each feature, the different scenarios or user stories (in compliance
 with the BDD methodology) have been created.
 In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:features_toolInstance"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/tool_instance_features_tests.png
	width 12cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Features developed and tested in the third sprint
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:features_toolInstance"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Fourth Sprint
\end_layout

\begin_layout Standard
As tools should be able to be customized, and many instances of each tool
 may be created it becomes necessary to make code refactoring in order to
 divide those two parts.
\end_layout

\begin_layout Subsubsection
Redesign
\end_layout

\begin_layout Standard
Tool definitions are separated from tool instances creating two different
 classes (ToolDef and ToolInstance), likewise steps definitions, which is
 related to tool definitions, should be separated from step implementations,
 for that purpose abstract classes StepDef and Step were created to steps
 inherit them.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{landscape}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Patterns
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/ferda/informatica/development/liferay/portlets/toolBuilder-portlet/doc/uml/exported/StepFactory Class Diagram.png
	scale 80
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Design for the fourth sprint
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sprint4_design"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{landscape}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Test design
\end_layout

\begin_layout Standard
Tests will remain the same since no new user functionalities will be implemented.
 Anyhow, the test should be passed to guarantee refactoring has been successful
 and accomplishes all the required features.
\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Standard
Refactoring database
\end_layout

\begin_layout Standard
N to N relationship and how Liferay Service Builder resolves it
\end_layout

\begin_layout Subsection
Fifth Sprint
\end_layout

\begin_layout Standard
Due to the breakup between tool definition and tool instance it is needful
 to define permissions to access both areas.
 Thus, the definition should be defined to be used by tool administrators,
 while the instances should be available to logged users, on the other hand
 not logged users will only be able to see tools instances but not use them.
 Therefore, the permission scheme should be defined to provide limited access
 based on user role.
\end_layout

\begin_layout Standard
Insertar cuadro
\end_layout

\begin_layout Subsubsection
Test design
\end_layout

\begin_layout Standard
The functional tests have been modified to include permissions restrictions,
 so XX tests have been modified in this way:
\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Standard
To code the permission restrictions the Liferay permissions scheme has been
 used
\end_layout

\begin_layout Subsection
Sixth Sprint
\end_layout

\begin_layout Standard
Once the backend for tool definition has been developed, it is time to create
 the interface so administrator users can choose between the different tool
 definitions created.
\end_layout

\begin_layout Subsubsection
Test design
\end_layout

\begin_layout Standard
A new scenario was created
\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Standard
A new portlet has been created only available for accessible for administrator
 users and available through the XXX section
\end_layout

\begin_layout Subsection
Seventh Sprint
\end_layout

\begin_layout Standard
A use case to create a new tool definition is defined as the first step
 to configure that new tool definition which will be able to be selected
 in the 
\family typewriter
adminView.xhtml
\family default
 and used by logged users.
\end_layout

\begin_layout Subsubsection
Test Design
\end_layout

\begin_layout Standard
Tests have been created for this use case.
\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Standard
In order to have different code instances for tool choosing and tool definition
 a new 
\family typewriter
toolDefConfig.xhtml
\family default
 file is created which will be called to configure the tool definitions.
 The name of the tool to work with will be passed as part of the URL (using
 
\family typewriter
GET
\family default
 method) so the page can be addressed straight away by any admin user.
\end_layout

\begin_layout Standard
In addition, a way to show different step definitions should be defined,
 so a tabs view was used because of the familiarity of users with this kind
 of interface and the easiness of development provided by the Primefaces
 
\family typewriter
tabView
\family default
 resource.
\end_layout

\begin_layout Standard
Beans development.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{landscape}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
¿que diagrama UML?
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /home/ferda/informatica/development/lib/liferay/liferay-plugins-sdk-6.2/portlets/toolBuilder-portlet/doc/uml/exported/Portlets Component Diagram.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{landscape}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Eighth Sprint
\end_layout

\begin_layout Standard
An interface to add steps to the tool definition should be created.
 It should be embedded in the 
\family typewriter
toolDefConfig.xhtml
\family default
 interface, but been independent because it will be called not only from
 there to add steps to the main tool definition, but also to add steps to
 any of the nested composite steps.
\end_layout

\begin_layout Standard
Add step use case diagram
\end_layout

\begin_layout Subsubsection
Test Design
\end_layout

\begin_layout Standard
Tests have been created for this use case.
\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Standard
The 
\emph on
Primefaces Dialog Framework
\emph default
 has been used to have the page to choose among different installed steps
 separately.
 Thus, the choice of the new step type is done in a new dialog which will
 return it (the step type) and will pass it to 
\family typewriter
toolDefConfig.xhtml
\family default
 via 
\family typewriter
POST
\family default
 method.
\end_layout

\begin_layout Standard
Capture of dialog
\end_layout

\begin_layout Subsection
Ninth Sprint
\end_layout

\begin_layout Standard
Delete step use case diagram
\end_layout

\begin_layout Subsubsection
Test Design
\end_layout

\begin_layout Standard
Tests have been created for this use case.
\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Standard
Coding this use case was not a hard task since the Primefaces 
\family typewriter
<p:tab />
\family default
 tag has a property called 
\family typewriter
closable
\family default
 which allows to close each tab by a button in the top-right corner, so
 it is also user-friendly.
 When closing, an ajax call is done if defined for the 
\family typewriter
tabClose
\family default
 event.
\end_layout

\begin_layout Subsection
Tenth Sprint
\end_layout

\begin_layout Standard
At this point, and due to an interview with the client, it was realized
 that steps order could be modified in tool definition configuration.
 Up to this moment, steps were added in consecutive order, from first to
 last,so if users wanted to modify the order the only way was deleting existing
 steps and creating them again.
 To fix this the model and hence the database should be modified.
\end_layout

\begin_layout Standard
Database relationships diagram with steps order included.
\end_layout

\begin_layout Subsubsection
Test Design
\end_layout

\begin_layout Standard
Tests for this sprint are just unit tests which verify the insertion of
 the steps relationships in the database.
 TODO
\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Standard
Talk about how I stop using service builder n to n relationships and create
 a new table to store the relationship and the order.
\end_layout

\begin_layout Standard
Talk about how add, remove methods have been modified and moveStep created
\end_layout

\begin_layout Standard
Refactoring
\end_layout

\begin_layout Subsection
Eleventh Sprint
\end_layout

\begin_layout Standard
Once the backend supports steps order it is time to modify the interface
 so admin users can change the order of the steps in a tool definition.
 It involved looking the possibilities of doing it in a user-friendly drag-and-d
rop way with the current tabs view.
 Given the impossibility of doing that with the existing Primefaces 
\family typewriter
<p:tab />
\family default
 tag the whole steps interface was redesigned.
\end_layout

\begin_layout Subsubsection
Test Design
\end_layout

\begin_layout Standard
Tests for this sprint are those to move the steps but with regression tests
 from eighth sprint in order to assure the proper functioning of the redesigned
 interface.
\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Standard
which means launch a dialog and drag-and-drop the Create interface to modify
 steps order in tool definitions.
 Due to the main
\end_layout

\begin_layout Subsection
Twelfth Sprint
\end_layout

\begin_layout Standard
Create interface to modify Composite Step Type
\end_layout

\begin_layout Subsection
Thirteenth Sprint
\end_layout

\begin_layout Standard
Create Web Content Step Type and show the step
\end_layout

\begin_layout Subsection
Fourteenth Sprint
\end_layout

\begin_layout Standard
Create Web Content Step Type configuration interface
\end_layout

\begin_layout Subsection
Fifth Sprint
\end_layout

\begin_layout Standard
Create Basic RAM Tool
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
Usability and modificabilidad/extensibilidad
\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Standard
2 Párrafos, destilado de los resultados
\end_layout

\begin_layout Standard
For the future: Performance testing
\end_layout

\begin_layout Section
Appendices
\end_layout

\end_body
\end_document
